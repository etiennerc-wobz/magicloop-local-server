<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Magic Loop - Dashboard</title>

    <!-- Font -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Outfit&display=swap">

    <!-- Styles -->
    <link rel="stylesheet" href="css/style.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css" />

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.5.0/dist/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

    <!-- Fontawesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg==" crossorigin="anonymous" referrerpolicy="no-referrer" />

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/15.8.0/nouislider.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/15.8.0/nouislider.min.js"></script>

    <script>
        let expandedItems = {};
        let slider;
        let allPayments = [];
        let allItems = [];
        let paginationHtml = '';
        let loading = true;
        let festivalEnded = false;
        let currentController = null;
        let fetchDataInterval;
        let selectedItemTypes = [];
        let selectedPaymentTypes = [];

        const feePerItem = 35; // cents

        const defaultStartTime = 0;
        const defaultEndTime = 24;

        const SECOND_IN_MILLISECONDS = 1000;
        const TIME_BEFORE_UPDATE = 5 * SECOND_IN_MILLISECONDS;
        const TIME_BEFORE_REMOVNG_ERROR = 5 * SECOND_IN_MILLISECONDS;

        $(document).ready(function () {
            // Multiselect
            $('.multiple-select-field').select2( {
                theme: "bootstrap-5",
                width: $(this).data('width') ? $(this).data('width') : $(this).hasClass('w-100') ? '100%' : 'style',
                placeholder: $(this).data('placeholder'),
                closeOnSelect: false

            });

            // Multiselect events
            $('#filters').on('change', '#item-type-filter .multiple-select-field', function() {
                selectedItemTypes = $(this).select2('data');
                resetFetchDataInterval();
                fetchData();
            });

            $('#filters').on('change', '#payment-type-filter .multiple-select-field', function() {
                selectedPaymentTypes = $(this).select2('data');
                resetFetchDataInterval();
                fetchData();
            });

            const refreshButton = document.getElementById('refresh-button');
            refreshButton.addEventListener('click', manualRefresh);

            const endButton = document.getElementById('end-button');
            endButton.addEventListener('click', () => {
                if (!confirm('Êtes-vous sûr de vouloir mettre fin au festival ?')) {
                    return;
                }
                festivalEnded = true;
                handleFestivalEnd();
            });
            
            getRefreshDate();

            slider = document.getElementById('hour-slider');

            noUiSlider.create(slider, {
                start: [defaultStartTime, defaultEndTime],
                connect: true,
                step: 0.5,
                range: {
                    'min': defaultStartTime,
                    'max': defaultEndTime
                },
                format: {
                    to: function (value) {
                        value = parseFloat(value).toFixed(2);
                        const hours = Math.floor(value);
                        const minutes = (value % 1) === 0.5 ? '30' : '00';
                        return hours.toString().padStart(2, '0') + ':' + minutes;
                    },
                    from: function (value) {
                        value = value = parseFloat(value).toFixed(2);
                        const [hours, minutes] = value.split(':').map(Number);
                        return hours + (minutes === 30 ? 0.5 : 0);
                    }
                }
            });

            const startHourDisplay = document.getElementById('start-hour');
            const endHourDisplay = document.getElementById('end-hour');

            slider.noUiSlider.on('start', function (values, handle) {
                if (fetchDataInterval) {
                    clearInterval(fetchDataInterval);
                }
            });

            slider.noUiSlider.on('update', function (values, handle) {
                startHourDisplay.textContent = values[0];
                endHourDisplay.textContent = values[1];
            });

            slider.noUiSlider.on('change', function (values, handle) {
                startHourDisplay.textContent = values[0];
                endHourDisplay.textContent = values[1];
                fetchData();
                fetchDataInterval = setInterval(fetchData, TIME_BEFORE_UPDATE, false);
            });

            fetchData();
            fetchDataInterval = setInterval(fetchData, TIME_BEFORE_UPDATE, false);
        })

        function formatDate(dateString) {
            const date = new Date(dateString);
            const options = {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                hour12: false,
                timeZone: 'Europe/Paris'
            };
            return date.toLocaleString('fr-FR', options).replace(',', ' -');
        }

        function handleError(error) {
            if (error.name === 'AbortError') {
                return;
            }
            const errorContainer = document.createElement('div');
            errorContainer.style = 'position: fixed; top: 0; left: 0; right: 0; z-index:10; padding: 1rem; background-color: #ff0000; color: #ffffff; font-weight: 600; text-align: center;';
            errorContainer.textContent = "Une erreur est survenue lors de la récupération des données. Veuillez tenter de relancer l'app.";
            document.body.appendChild(errorContainer);
            console.error(error);

            setTimeout(() => {
                errorContainer.remove();
            }, TIME_BEFORE_REMOVNG_ERROR);
        }

        async function getRefreshDate() {
            const refreshDate = await fetch('/api/refreshDate')
                .then((response) => response.json())
                .catch(handleError);
            const refreshDateContainer = document.getElementById('refresh-date');
            refreshDateContainer.textContent = `Paiements effectués après le : ${new Date(refreshDate).toLocaleDateString('fr-FR')} ${new Date(refreshDate).toLocaleTimeString('fr-FR')}`;  
        }

        function addLoader() {
            let parentHeight = $('.table-container').innerHeight();
            $('.overlay-spinner').show();
            $('.overlay-spinner').css({height: parentHeight + 'px'});
        }

        function removeLoader() {
            $('.overlay-spinner').hide();
        }

        async function fetchData(withLoader = true) {
            if (withLoader) {
                addLoader();
            }
            
            let [startTime, endTime] = [defaultStartTime, defaultEndTime];
            if (slider) {
                [startTime, endTime] = slider.noUiSlider.get();
            }
            
            const data = await fetch('/api/data', {
                method: "POST", 
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({selectedItemTypes, selectedPaymentTypes, startTime, endTime})
            })
                .then(response => response.json())
                .catch(handleError)
                .finally(function() {
                    if (withLoader) {
                        removeLoader();
                    }
                })
            ;
            loading = false;

            allPayments = data.payments.sort((a, b) => new Date(b.validatedAt) - new Date(a.validatedAt));
            allItems = data.items;
            paginationHtml = data.pagination;

            displayFilteredData();
            if (withLoader) {
                removeLoader();
            }
        }

        function displayFilteredData() {
            const filteredPayments = allPayments;
            const paymentsList = document.getElementById('payments-list');

            let totalAmount = 0;
            let totalFees = 0;
            let totalRefunded = 0;
            let totalItems = 0;
            let totalCollected = 0;
            let paymentMediaCount = {};
            let paymentStatusCount = {};
            paymentsList.innerHTML = '';

            if (filteredPayments.filter(payment => payment.amount > 0).length === 0) {
                if (loading) {
                    const tr = document.createElement('tr');
                    tr.innerHTML = '<td colspan="8" style="text-align: center;">Chargement...</td>';
                    paymentsList.appendChild(tr);
                } else {
                    const tr = document.createElement('tr');
                    tr.innerHTML = '<td colspan="8" style="text-align: center;">Aucune transaction n\'a été trouvée.</td>';
                    paymentsList.appendChild(tr);
                }
            }

            filteredPayments.forEach(payment => {
                if (payment.amount < 0) {
                    return;
                }
                const paymentId = payment['@id'].split('/').pop();
                const amountInEuros = payment.amount / 100;
                console.log(amountInEuros);
                if (! (payment.status in paymentStatusCount)) {
                    paymentStatusCount[payment.status] = 0;
                }
                paymentStatusCount[payment.status] ++;
                if (! (payment.paymentMedia in paymentMediaCount)) {
                    paymentMediaCount[payment.paymentMedia] = 0;
                }
                paymentMediaCount[payment.paymentMedia] ++;

                let paymentItems = []
                let paymentItemsStatus = {total: payment.nbOfItems, paired: 0, inUse: 0, collected: 0};
                let refundedAmount = 0;

                if (!(allItems.length === 0 || allItems.filter(item => item.payment_id === paymentId).length === 0)) {
                    allItems.filter(item => item.payment_id === paymentId).map(function(item) {

                        // Add price of the item
                        item.price = payment.allItems
                            .filter(paymentItem => paymentItem.itemId == item.id)
                            .map(paymentItem => paymentItem.price)
                            [0] ?? null
                        ;
                        paymentItems.push(item);
                        paymentItemsStatus.paired ++;
                        if (item.status === 'COLLECTED') {
                            if (item.price) {
                                refundedAmount += (item.price - feePerItem) / 100;
                            }
                            paymentItemsStatus.collected ++;
                        }
                        if (item.status === 'IN_USE') {
                            paymentItemsStatus.inUse ++;
                        }
                    });
                }

                payment.refundedAmount = refundedAmount;

                // Compute fee for this transaction
                let fee = payment.nbOfItems * feePerItem / 100;

                /** PAYMENT ROWS */
                const tr = document.createElement('tr');
                tr.classList.add('sub-container');
                tr.addEventListener('click', function (event) {
                    const exploder = this.querySelector('.exploder');
                    exploder.click();
                });
                tr.innerHTML = `
                    <td>
                        <span class="exploder">
                            <i class="fa-solid fa-chevron-right"></i>
                        </span>
                    </td>
                    <td>${paymentId}</td>
                    <td>${formatDate(payment.validatedAt)}</td>
                    <td>${amountInEuros} € (dont ${fee.toFixed(2)} € de frais d'usage)</td>
                    <td>${payment.items_collectes < 1 && paymentItemsStatus.paired < 1 && !festivalEnded ? '/'
                        : payment.items_collectes < 1 && (festivalEnded || paymentItemsStatus.paired > 0) ? '0.00 €'
                        : payment.refundedAmount.toFixed(2) + ' €'}</td>
                    <td>${paymentItemsStatus.total} / ${paymentItemsStatus.collected}</td>
                    <td>${payment.paymentMedia ?? '–'}</td>
                    <td class="${payment.status === 'terminé' ? 'grey-bg' : festivalEnded ? 'grey-bg' : ''}">
                        ${payment.status === 'en cours' && festivalEnded ? 'terminé' :
                        payment.status === 'en cours' && paymentItemsStatus.paired < 1 ? 'en attente' : payment.status}
                    </td>
                `;
                paymentsList.appendChild(tr);
                totalAmount += amountInEuros;
                totalFees += fee;
                if(payment.items_collectes > 0) {
                    totalRefunded += payment.refundedAmount;
                }
                totalItems += paymentItemsStatus.total;
                totalCollected += paymentItemsStatus.collected;                

                /** ITEM ROWS */
                const itemsTr = document.createElement('tr');
                itemsTr.classList.add('explode', 'hide');
                itemsTr.innerHTML = `
                    <td colspan="8" style="background: #f3fffb; display: none;">
                        <table class="table table-condensed">
                            <thead>
                                <tr class="item-row">
                                    <th>ID de l'Item</th>
                                    <th>RFID</th>
                                    <th>Type d'item</th>
                                    <th>Prix unitaire</th>
                                    <th>Statut</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${paymentItems.length === 0 ? 
                                    '<tr><td colspan="5">Aucun item n\'a été associé pour le moment</td></tr>' : 
                                    ''
                                }
                                ${paymentItems.map(item => `
                                    <tr>
                                        <td>${item.id}</td>
                                        <td>${item.rfid}</td>
                                        <td>${item.itemTypeCode}</td>
                                        <td>${(item.price === null) ? 'Inconnu' : (item.price / 100).toFixed(2) + ' €'}</td>
                                        <td class="${
                                            item.status === 'COLLECTED' ? 'light-green-bg'
                                                : item.status === 'IN_USE' && !festivalEnded ? 'light-yellow-bg'
                                                : item.status === 'IN_USE' && festivalEnded ? 'light-red-bg'
                                                : ''}"
                                        >
                                            ${item.status === 'IN_USE' && festivalEnded ? 'manquant'
                                                : item.status === 'IN_USE' && !festivalEnded ? 'en cours d\'utilisation'
                                                : item.status === 'COLLECTED' ? 'rendu' : item.status}
                                        </td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    </td>
                `;
                paymentsList.appendChild(itemsTr);

                if (expandedItems[paymentId]) {
                    $(itemsTr).removeClass('hide').find('td').show();
                    $(tr).find('.exploder').children("i").toggleClass("fa-chevron-right fa-chevron-down");
                }
            });

            /** TOTAL */
            let paymentMediaCountText = [];
            for(let media in paymentMediaCount) {
                paymentMediaCountText.push(paymentMediaCount[media] + " en " + media);
            }
            let paymentStatusCountText = [];
            for(let status in paymentStatusCount) {
                paymentStatusCountText.push(paymentStatusCount[status] + " " + status);
            }
            const totalTr = document.createElement('tr');
            totalTr.className = 'light-green-bg row-total';
            totalTr.innerHTML = `
                <td></td>
                <td>${filteredPayments.length} transactions</td>
                <td><strong>TOTAL ENCAISS&Eacute;</strong></td>
                <td>${totalAmount} € (dont ${totalFees.toFixed(1) + "0 €"} de frais d'usage)</td>
                <td>${totalRefunded.toFixed(1) + "0"} €</td>                    
                <td>${totalItems} / ${totalCollected}</td>
                <td>${paymentMediaCountText.join('<br />')}</td>
                <td>${paymentStatusCountText.join('<br />')}</td>
            `;
            paymentsList.appendChild(totalTr);

            // const paginationBlock = document.getElementById('items-pagination');
            // paginationBlock.innerHTML = paginationHtml;

            $(".exploder").on('click', function (event) {
                event.stopPropagation();

                const $btn = $(this);
                const $row = $btn.closest("tr").next("tr");
                const paymentIdElt = $btn.closest("tr").find('td').eq(1).text();

                $btn.children("i").toggleClass("fa-chevron-right fa-chevron-down");

                $row.toggleClass("hide");

                if ($row.hasClass("hide")) {
                    $row.children("td").slideUp();
                    expandedItems[paymentIdElt] = false;
                } else {
                    $row.children("td").slideDown(350);
                    expandedItems[paymentIdElt] = true;
                }
            });

            $('[data-toggle="tooltip"]').tooltip();
        }

        function handleFestivalEnd() {
            //Count the items that are not in 'rendu' state
            const itemsNotReturned = allItems.filter(item => item.status !== 'COLLECTED').length;
            const itemsReturned = allItems.filter(item => item.status === 'COLLECTED').length;
            const endfestivalDiv = document.getElementById('end-festival-infos');
            endfestivalDiv.innerHTML = `
                <div style="background-color: rgba(145,234,226,0.27); position:fixed; right:20vh; top:7rem; padding: 1rem; border-radius: 0.5rem; margin-top: 1rem;">
                    <p>Le festival est terminé.</p>
                    <p>Nombre d'items non rendus : <strong> ${itemsNotReturned}</strong></p>
                    <p>Nombre d'items rendus : <strong> ${itemsReturned}</strong></p>
                </div>
            `;
        }

        async function manualRefresh() {
            console.log('Refreshing data...');

            const response = await fetch('/refresh');
            const responseText = await response.text();
            const refreshDate = document.getElementById('refresh-date');
            refreshDate.textContent = `Dernière mise à jour : ${new Date().toLocaleTimeString('fr-FR')}`;
        }

        function resetFetchDataInterval() {
            if (fetchDataInterval) {
                clearInterval(fetchDataInterval);
            }
            fetchDataInterval = setInterval(fetchData, TIME_BEFORE_UPDATE, false);
        }
    </script>

    <style>
        body {
            font-family: 'Outfit', sans-serif;
            background-color: #f7fafc;
            color: #1a202c;
            display: flex;
            flex-direction: column;
            align-items: center;
            margin: 0;
            padding: 0;
            position: relative;
            min-height: 100vh;
        }

        .background-image-bottom-right {
            position: fixed;
            bottom: 0;
            right: 0;
            width: 600px;
            height: 600px;
            background-image: url('https://www.le-mosh.com/wp-content/uploads/monstre-mosh-2.png');
            background-size: contain;
            background-repeat: no-repeat;
            background-position: bottom right;
            z-index: -1;
            opacity: 0.3;
        }

        @keyframes blink {
            0% {
                fill: black;
            }
            50% {
                fill: #1AE6AB;
            }
            100% {
                fill: black;
            }
        }


        .refresh-button {
            font-family: 'Outfit', sans-serif;
            background-color: #74BDB6;
            color: #ffffff;
            border: 0px;
            padding: 0.8rem 1rem;
            border-radius: 0.5rem;
            cursor: pointer;
            z-index: -4;
        }

        .refresh-button:hover {
            background-color: #59938d;
        }

        .end-button {
            font-family: 'Outfit', sans-serif;
            background-color: #bd8f8f;
            color: #ffffff;
            border: 0px;
            padding: 0.8rem 1rem;
            border-radius: 0.5rem;
            cursor: pointer;
            z-index: -4;
        }

        .end-button:hover {
            background-color: #a17c7c;
        }

        .refresh-container {
            position: fixed;
            top: 20px;
            right: 5rem;
            display: flex;
            align-items: end;
            justify-content: end;
            gap: 1rem;
            width: 40%;
            z-index: 0;
        }

        .containerBig {
            margin-top: 8rem;
            width: 80%;
            display: flex;
            flex-direction: column;
            align-items: center;
            position: relative;
            z-index: 2;
        }

        .containerTab {
            margin-top: 2rem;
            width: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            position: relative;
            z-index: 2;
            padding-bottom: 2vh;
        }

        .table-container {
            width: 100%;
            overflow-y: auto;
            background-color: #ffffff;
            border-radius: 0.5rem;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        }

        .table {
            width: 100%;
            border-collapse: collapse;
            text-align: center;
            font-family: 'Outfit', sans-serif;
            margin: 0px;
            background-color: white;
        }

        .table-condensed > thead > tr > th, .table-condensed > tbody > tr > th, .table-condensed > tfoot > tr > th, .table-condensed > thead > tr > td, .table-condensed > tbody > tr > td, .table-condensed > tfoot > tr > td {
            padding: 0.75rem;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            text-align: center;
            font-family: 'Outfit', sans-serif;
            margin: 0px;

        }

        tr {
            border: 4px solid #edf2f7;
        }

        th, td {
            padding: 0.75rem;
            border-bottom: 1px solid #edf2f7;
            vertical-align: middle;
            font-size: 1rem;
            text-align: center;
        }

        th {
            background-color: #f7fafc;
            font-weight: 600;
            font-size: 1.1rem;
        }

        tr:last-child td {
            border-bottom: none;
        }

        tbody tr:hover {
            background-color: #f5f5f5;
            cursor: pointer;
        }

        tbody table tr:hover {
            background-color: white;
            cursor: auto;
        }

        tr.row-total:hover {
            cursor: auto;
        }

        #stats-page-link {
            position: fixed;
            top: 20px;
            left: 220px;
            font-family: 'Outfit', sans-serif;
            color: #74BDB6;
            cursor: pointer;
            border: none;
            background: none;
            padding: 0.5rem 1rem;
            border-radius: 2.5rem;
            font-size: 1.4rem;
        }

        #stats-page-link:hover {
            color: #5a948f;
            text-decoration: underline;
        }

        .time-filter {
            margin-bottom: 1rem;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 1rem;
        }

        .top-left-img {
            position: fixed;
            top: 30px;
            left: 20px;
            width: 200px;
            height: auto;
            z-index: -1;
            opacity: 0.9;
        }

        .hour-display {
            display: flex;
            justify-content: space-between;
            width: 100%;
            max-width: 300px;
        }

        #hour-slider {
            width: 100%;
            max-width: 350px;
            height: 12px;
        }

        .btn-success, .btn-success:hover, .btn-success:focus, .btn-success:active {
            border-radius: 50%;
            padding: 0.3rem;
            font-size: 0.9rem;
            color: black;
            background-color: transparent;
            outline: none;
            border: none;
        }

        .btn-danger, .btn-danger:hover, .btn-danger:focus, .btn-success:active {
            border-radius: 50%;
            padding: 0.3rem;
            font-size: 0.9rem;
            color: black;
            background-color: transparent;
            outline: none;
            border: none;
        }

        .fa-solid {
            font-size: 1.1rem;
        }

        .hide {
            display: none;
        }

        .light-green-bg {
            background-color: #d4ede4 !important;
        }

        .light-yellow-bg {
            background-color: #f8f0d9 !important;
        }

        .light-red-bg {
            background-color: #f8d7da !important;
        }

        .grey-bg {
            background-color: #aaadaf !important;
        }

        .noUi-connect {
            background: #74BDB6;
        }

        .noUi-base {
            background: rgba(116, 189, 182, 0.21);
            top: 50%;
            height: 8px;
        }

        .noUi-target {
            border: 0px;
            box-shadow: none;
        }

        .noUi-origin {
            height: 4px;
        }

        .noUi-handle {
            transform: translateY(-30%);
            transform: translateX(-80%);
            border: 2px solid #74BDB6;
            background: #7ccec6;
            box-shadow: none;
            border-radius: 50%;
        }

        .noUi-horizontal .noUi-handle {
            width: 15px;
            height: 20px;
        }

        .noUi-handle:hover {
            background: #69aba5;
        }

        .noUi-handle:active {
            outline: 2px solid #a0ece5;
        }

        .noUi-handle:before,
        .noUi-handle:after {
            display: none;
        }

        .noUi-tooltip {
            display: none;
        }

        .noUi-active .noUi-tooltip {
            display: block;
        }

        .dropdown {
            position: relative;
            display: inline-block;

        }

        .btn-primary {
            background-color: transparent;
            outline: 2px solid #74BDB6;
            color: #74BDB6;
            font-size: 16px;
            border: none;
            cursor: pointer;
            border-radius: 50%;
            width: 45px;
            height: 35px;
        }

        .btn-primary:hover {
            background-color: rgba(116, 189, 182, 0.34);
        }

        .dropdown-toggle.btn-primary:focus, .dropdown-toggle.btn-primary:active,
        .open > .dropdown-toggle.btn-primary, .btn-primary:focus, .btn-primary:active {
            background-color: rgba(116, 189, 182, 0.34);
            outline: 2px solid #74BDB6;
            box-shadow: none;
        }

        .btn-primary.active.focus,
        .btn-primary.active:focus,
        .btn-primary.active:hover,
        .btn-primary:active.focus,
        .btn-primary:active:focus,
        .btn-primary:active:hover,
        .open > .dropdown-toggle.btn-primary.focus,
        .open > .dropdown-toggle.btn-primary:focus,
        .open > .dropdown-toggle.btn-primary:hover {
            color: #fff;
            background-color: rgba(116, 189, 182, 0.34);
            outline: 2px solid #74BDB6;
            box-shadow: none;
        }

        .dropdown-menu {
            right: 0;
            left: auto;
            min-width: 200px;
            cursor: pointer;
        }

        nav {
            display: flex;
            border-top: 1px solid #eee;
            margin-top: 1em;
            padding-top: 0.5em;
        }

        .pagination {
            list-style: none;
            margin: 0;
            padding: 0;
            display: flex;
        }

        .pagination li {
            margin: 0 1px;
            
        }

        .pagination li a, .pagination li a:visited {
            color: #5a948f;
        }

        .pagination li:not(.active) a:hover {
            font-weight: bold;
        }

        .pagination li.active {
            background-color: #c8dedc;
        }

        .pagination a {
            display: block;
            padding: 0.5em 1em;
            border: 1px solid #999;
            border-radius: 0.2em;
            text-decoration: none;
        }

        .pagination a[aria-current="page"] {
            background-color: #333;
            color: #fff;
        }
        
        .overlay-spinner {
            position: absolute;
            z-index: 10;
            background-color: rgba(255, 255, 255, 0.8);
            width: inherit;
            height: 70%;
        }
        
        .overlay-spinner > div {
            margin: auto;
            position: relative;
            top :50%;
        }

        .icon-question-mark {
            color: #5a948f;
            font-size: 12px;
        }
    </style>
</head>
<body>
<a id="stats-page-link" href="/stats">
    Voir les statistiques
</a>
<div class="refresh-container">
    <div id="refresh-date"></div>
    <div class="dropdown">
        <button class="btn btn-primary dropdown-toggle" type="button" id="menuButton" data-toggle="dropdown" data-bs-toggle="dropdown"
            aria-haspopup="true" aria-expanded="false">
            <i class="fa-solid fa-bars"></i>
        </button>
        <ul class="dropdown-menu" aria-labelledby="menuButton">
            <li><a class="dropdown-item" id="end-button" style="color: #603434;"
                >Fin du festival</a></li>
            <li><a class="dropdown-item" id="refresh-button" style="color: #356e69;"
                >Vider la BD</a></li>
        </ul>
    </div>
</div>
<div id="end-festival-infos"></div>
<div class="containerBig">
    <h1>Dashboard</h1>
    <div class="containerTab">
        <div id="filters">
            <div id="payment-type-filter">
                <select class="form-select multiple-select-field" data-placeholder="Choisir un type de paiement" multiple>
                    <option value="CASHLESS">Cashless</option>
                    <option value="CB">Carte Bancaire</option>
                </select>
            </div>
            <div class="time-filter">
                <div id="hour-slider"></div>
                <div class="hour-display">
                    <span>De <span id="start-hour">00:00</span></span>
                    <span>à <span id="end-hour">24:00</span></span>
                </div>
            </div>
            <div id="item-type-filter">
                <!-- We don't use this filter anymore
                <select class="form-select multiple-select-field" data-placeholder="Choisir un type d'objet" multiple>
                    <option value="MG33IML">Mosh G33 IML</option>
                    <option value="MG50STICKER">Mosh G50 Sticker</option>
                </select>-->
            </div>
        </div>
        
        <div class="table-container">
            <div class="overlay-spinner text-center"><div class="spinner-border text-primary mt-2"><span class="sr-only">Loading...</span></div></div>
            <table class="table table-condensed">
                <thead>
                    <tr>
                        <th></th>
                        <th>ID</th>
                        <th>Date</th>
                        <th>Montant encaissé</th>
                        <th>Montant remboursé</th>
                        <th>Nombre de contenants<br /><small>Mis en service / Rendus</small></th>
                        <th>Paiement</th>
                        <th>Statut</th>
                    </tr>
                </thead>
                <tbody id="payments-list">
                <!-- Les lignes de paiements et d'items seront insérées ici -->
                </tbody>
            </table>
        </div>

        <!-- <nav id="items-pagination"></nav> -->
    </div>
</div>
<img class="top-left-img" src="/reuse-logopng.png" alt="Logo">


</body>
</html>
